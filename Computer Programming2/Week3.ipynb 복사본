{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "안녕하세요?\n",
      "100\n",
      "100\n"
     ]
    }
   ],
   "source": [
    "print('안녕하세요?')\n",
    "print('100')\n",
    "print('%d'%100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/20=00000000.5\n",
      "123\n",
      "  123\n",
      "00123\n",
      "123.450000\n",
      "  123.5\n",
      "123.450\n"
     ]
    }
   ],
   "source": [
    "print('%d/%d=%010.1f'%(100,20,0.5))\n",
    "print('%d'%123)\n",
    "print('%5d'%123)\n",
    "print('%05d'%123)\n",
    "print('%f'%123.45)\n",
    "print('%7.1f'%123.45)\n",
    "print('%07.3f'%123.45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123 123 123\n",
      "123123  123\n",
      "01018\n"
     ]
    }
   ],
   "source": [
    "print('%d %d %d'%(123,123,123))\n",
    "print('{0:d}{1:d}{2:5d}'.format(123,123,123)) #{인덱스:포맷}\n",
    "print('{2:d}{1:d}{0:d}'.format(18,10,0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "줄바꿈\n",
      "줄바꿈\n",
      "탭\t탭\n",
      "뒤로뒤로\b뒤로가기\n",
      "\\역슬래시\n",
      "작은따옴표'출력하깅\n",
      "큰따옴표\"출력하깅\n"
     ]
    }
   ],
   "source": [
    "print('줄바꿈\\n줄바꿈') #\\n: 줄바꿈\n",
    "print('탭\\t탭') #\\t: 다음 탭으로 이동\n",
    "print('뒤로뒤로\\b뒤로가기') #\\b: backspaces를 누른 효과\n",
    "print('\\\\역슬래시') #\\\\: 역슬래쉬 1개 출력\n",
    "print('작은따옴표\\'출력하깅') #\\': 작은따옴표 출력\n",
    "print(\"큰따옴표\\\"출력하깅\") #\\\": 큰따옴표 출력"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'bool'>\n",
      "<class 'float'>\n",
      "<class 'int'>\n"
     ]
    }
   ],
   "source": [
    "a=True\n",
    "print(type(a))\n",
    "b=0.0\n",
    "print(type(b))\n",
    "c=10\n",
    "print(type(c))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0b1011\n",
      "0b1001\n",
      "0b10001\n"
     ]
    }
   ],
   "source": [
    "print(bin(11))\n",
    "print(bin(0o11))\n",
    "print(bin(0x11))\n",
    "#bin()함수는 2진수로 변환, oct()함수는 8진수, hex()함수는 16진수로 변환하여 출력함."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "입력 진수 결정(16/10/8/2): 16\n",
      "값 입력: FF\n",
      "16진수=> 0xff\n",
      "10진수=> 255\n",
      "8진수=> 0o377\n",
      "2진수=> 0b11111111\n"
     ]
    }
   ],
   "source": [
    "sel=int(input('입력 진수 결정(16/10/8/2): '))\n",
    "num=input('값 입력: ')\n",
    "\n",
    "if sel==16:\n",
    "    num10=int(num,16)\n",
    "if sel==10:\n",
    "    num10=int(num,10)\n",
    "if sel==8:\n",
    "    num10=int(num,8)\n",
    "if sel==2:\n",
    "    num10=int(num,2)\n",
    "print('16진수=>',hex(num10))\n",
    "print('10진수=>',num10)\n",
    "print('8진수=>',oct(num10))\n",
    "print('2진수=>',bin(num10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "메인 함수 부분이 실행됩니다.\n",
      "함수를 호출함.\n",
      "전역 변수 값:  100\n"
     ]
    }
   ],
   "source": [
    "## 함수 선언 부분 ##\n",
    "def myfunc():\n",
    "    print('함수를 호출함.')\n",
    "\n",
    "## 전역 변수 선언 부분 ##\n",
    "gvar=100\n",
    "_name='__main__'\n",
    "\n",
    "## 메인 코드 부분 ##\n",
    "if _name=='__main__':\n",
    "    print('메인 함수 부분이 실행됩니다.')\n",
    "    myfunc()\n",
    "    print('전역 변수 값: ',gvar)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
